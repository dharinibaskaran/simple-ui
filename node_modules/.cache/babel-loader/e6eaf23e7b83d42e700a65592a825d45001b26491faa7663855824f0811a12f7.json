{"ast":null,"code":"var _jsxFileName = \"/Users/dharinibaskaran/Desktop/Inovonics/UI/my-app/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import \"./index.css\"; // Ensure CSS file is imported\n\n// function App() {\n//   const [image, setImage] = useState(null);\n\n//   const handleImageUpload = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setImage(URL.createObjectURL(file));\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       {/* Header */}\n//       <header className=\"header\">\n//         <h1>INOVONICS VECTORIZER</h1>\n//       </header>\n\n//       {/* Main Content */}\n//       <div className=\"content\">\n//         {/* Upload Button */}\n//         <div className=\"upload-section\">\n//           <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n//         </div>\n\n//         {/* Image and Detected Boundaries Section */}\n//         <div className=\"image-container\">\n//           {/* Original Uploaded Image */}\n//           <div className=\"image-box\">\n//             <p className=\"title\">The original uploaded image:</p>\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <div className=\"placeholder\">No Image</div>\n//             )}\n//           </div>\n\n//           {/* Detected Boundaries */}\n//           <div className=\"image-box\">\n//             <p className=\"title\">Detected Boundaries:</p>\n//             <div className=\"placeholder\">Processing...</div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [image, setImage] = useState(null);\n//   const [jsonOutput, setJsonOutput] = useState(null);\n//   const [error, setError] = useState(\"\");\n\n//   const handleImageUpload = (event) => {\n//     const file = event.target.files[0];\n\n//     if (file) {\n//       const fileType = file.type;\n//       if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n//         setImage(URL.createObjectURL(file));\n//         setError(\"\");\n\n//         // Mock JSON Output (Replace this with real processing output)\n//         const mockJson = {\n//           filename: file.name,\n//           size: file.size,\n//           format: fileType,\n//           detectedBoundaries: [\n//             { x: 10, y: 20, width: 100, height: 150 },\n//             { x: 200, y: 50, width: 80, height: 90 },\n//           ],\n//         };\n//         setJsonOutput(mockJson);\n//       } else {\n//         setError(\"Only PNG or JPEG files are allowed.\");\n//         setImage(null);\n//         setJsonOutput(null);\n//       }\n//     }\n//   };\n\n//   return (\n//     <>\n//       {/* Full Width Header */}\n//       <header className=\"header\">\n//         <h1>INOVONICS VECTORIZER</h1>\n//       </header>\n\n//       {/* Full Screen Container */}\n//       <div className=\"main-container\">\n//         {/* Upload and Image Section */}\n//         <div className=\"upload-image-section\">\n//           {/* Upload Section */}\n//           <div className=\"upload-box\">\n//             <input\n//               type=\"file\"\n//               accept=\"image/png, image/jpeg\"\n//               onChange={handleImageUpload}\n//               style={{ display: \"none\" }}\n//               id=\"fileInput\"\n//             />\n//             <label htmlFor=\"fileInput\" className=\"upload-btn\">\n//               Upload Image\n//             </label>\n//             {error && <p className=\"error-message\">{error}</p>}\n//           </div>\n\n//           {/* Image Display Section */}\n//           <div className=\"image-box\">\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <p>No Image Uploaded</p>\n//             )}\n//           </div>\n//         </div>\n\n//         {/* JSON Output Section */}\n//         <div className=\"json-container\">\n//           <h3>JSON Output:</h3>\n//           <pre className=\"json-output\">\n//             {jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"}\n//           </pre>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [image, setImage] = useState(null);\n//   const [jsonOutput, setJsonOutput] = useState(null);\n//   const [error, setError] = useState(\"\");\n\n//   const handleImageUpload = (event) => {\n//     const file = event.target.files[0];\n\n//     if (file) {\n//       const fileType = file.type;\n//       if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n//         setImage(URL.createObjectURL(file));\n//         setError(\"\");\n\n//         // Mock JSON Output (Replace this with real processing output)\n//         const mockJson = {\n//           filename: file.name,\n//           size: file.size,\n//           format: fileType,\n//           detectedBoundaries: [\n//             { x: 10, y: 20, width: 100, height: 150 },\n//             { x: 200, y: 50, width: 80, height: 90 },\n//           ],\n//         };\n//         setJsonOutput(mockJson);\n//       } else {\n//         setError(\"Only PNG or JPEG files are allowed.\");\n//         setImage(null);\n//         setJsonOutput(null);\n//       }\n//     }\n//   };\n\n//   return (\n//     <>\n//       {/* Full Width Header */}\n//       <header className=\"header\">\n//         <img src=\"/logo.png\" alt=\"Logo\" className=\"logo\" />\n//         <h1>2D Floorplan Vectorizer</h1>\n//       </header>\n\n//       {/* Full Screen Container */}\n//       <div className=\"main-container\">\n//         {/* Upload and Image Section */}\n//         <div className=\"upload-image-section\">\n//           {/* Upload Section */}\n//           <div className=\"upload-box\">\n//             <input\n//               type=\"file\"\n//               accept=\"image/png, image/jpeg\"\n//               onChange={handleImageUpload}\n//               style={{ display: \"none\" }}\n//               id=\"fileInput\"\n//             />\n//             <label htmlFor=\"fileInput\" className=\"upload-btn\">\n//               Upload Image\n//             </label>\n//             {error && <p className=\"error-message\">{error}</p>}\n//           </div>\n\n//           {/* Image Display Section */}\n//           <div className=\"image-box\">\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <p>No Image Uploaded</p>\n//             )}\n//           </div>\n//         </div>\n\n//         {/* JSON Output Section */}\n//         <div className=\"json-container\">\n//           <h3>JSON Output:</h3>\n//           <pre className=\"json-output\">\n//             {jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"}\n//           </pre>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [image, setImage] = useState(null);\n//   const [jsonOutput, setJsonOutput] = useState(null);\n//   const [error, setError] = useState(\"\");\n\n//   const handleImageUpload = (file) => {\n//     if (file) {\n//       const fileType = file.type;\n//       if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n//         setImage(URL.createObjectURL(file));\n//         setError(\"\");\n\n//         // Mock JSON Output (Replace this with real processing output)\n//         const mockJson = {\n//           filename: file.name,\n//           size: file.size,\n//           format: fileType,\n//           detectedBoundaries: [\n//             { x: 10, y: 20, width: 100, height: 150 },\n//             { x: 200, y: 50, width: 80, height: 90 },\n//           ],\n//         };\n//         setJsonOutput(mockJson);\n//       } else {\n//         setError(\"Only PNG or JPEG files are allowed.\");\n//         setImage(null);\n//         setJsonOutput(null);\n//       }\n//     }\n//   };\n\n//   const handleFileSelect = (event) => {\n//     const file = event.target.files[0];\n//     handleImageUpload(file);\n//   };\n\n//   const handleDragOver = (event) => {\n//     event.preventDefault(); // Prevents opening file in a new tab\n//   };\n\n//   const handleDrop = (event) => {\n//     event.preventDefault(); // Prevents default browser behavior\n//     const file = event.dataTransfer.files[0];\n//     handleImageUpload(file);\n//   };\n\n//   return (\n//     <>\n//       {/* Full Width Header */}\n//       <header className=\"header\">\n//   <img src=\"/logo.png\" alt=\"Logo\" className=\"logo\" />\n//   <div className=\"header-title\">2D Floorplan Vectorizer</div>\n// </header>\n\n//       {/* Full Screen Container */}\n//       <div className=\"main-container\">\n//         {/* Upload and Image Section */}\n//         <div className=\"upload-image-section\">\n//           {/* Upload Section */}\n//           <div\n//             className=\"upload-box\"\n//             onDragOver={handleDragOver}\n//             onDrop={handleDrop}\n//           >\n//             <label htmlFor=\"fileInput\" className=\"upload-btn\">\n//               Upload Image\n//             </label>\n//             <input\n//               type=\"file\"\n//               accept=\"image/png, image/jpeg\"\n//               onChange={handleFileSelect}\n//               style={{ display: \"none\" }}\n//               id=\"fileInput\"\n//             />\n//             <div className=\"drag-drop-box\">\n//               <p>Drag and drop files here</p>\n//             </div>\n//             {error && <p className=\"error-message\">{error}</p>}\n//           </div>\n\n//           {/* Image Display Section */}\n//           <div className=\"image-box\">\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <p>No Image Uploaded</p>\n//             )}\n//           </div>\n//         </div>\n\n//         {/* JSON Output Section */}\n//         <div className=\"json-container\">\n//           <h3>JSON Output:</h3>\n//           <pre className=\"json-output\">\n//             {jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"}\n//           </pre>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport jsonData from \"./data.json\"; // Import JSON file\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [jsonOutput, setJsonOutput] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleImageUpload = file => {\n    if (file) {\n      const fileType = file.type;\n      if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n        setError(\"\");\n        setIsProcessing(true);\n\n        // Wait for 5 seconds before showing image & JSON\n        setTimeout(() => {\n          setImage(URL.createObjectURL(file));\n          setJsonOutput(jsonData); // Load JSON from file\n          setIsProcessing(false);\n        }, 5000);\n      } else {\n        setError(\"Only PNG or JPEG files are allowed.\");\n        setImage(null);\n        setJsonOutput(null);\n      }\n    }\n  };\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    handleImageUpload(file);\n  };\n  const handleDragOver = event => {\n    event.preventDefault(); // Prevents opening file in a new tab\n  };\n  const handleDrop = event => {\n    event.preventDefault(); // Prevents default browser behavior\n    const file = event.dataTransfer.files[0];\n    handleImageUpload(file);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/logo.png\",\n        alt: \"Logo\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-title\",\n        children: \"2D Floorplan Vectorizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-image-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fileInput\",\n            className: \"upload-btn\",\n            children: \"Upload Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/png, image/jpeg\",\n            onChange: handleFileSelect,\n            style: {\n              display: \"none\"\n            },\n            id: \"fileInput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drag-drop-box\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Drag and drop files here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-box\",\n          children: isProcessing ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Processing... Please wait\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 15\n          }, this) : image ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: \"Uploaded\",\n            className: \"uploaded-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No Image Uploaded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"json-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"JSON Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"json-output\",\n          children: isProcessing ? \"Processing JSON...\" : jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"6pkGWuIX6bOX3EDqCdR+8nYwt5M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsonData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","image","setImage","jsonOutput","setJsonOutput","error","setError","isProcessing","setIsProcessing","handleImageUpload","file","fileType","type","setTimeout","URL","createObjectURL","handleFileSelect","event","target","files","handleDragOver","preventDefault","handleDrop","dataTransfer","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","onDrop","htmlFor","accept","onChange","style","display","id","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/dharinibaskaran/Desktop/Inovonics/UI/my-app/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n// import React, { useState } from \"react\";\n// import \"./index.css\"; // Ensure CSS file is imported\n\n// function App() {\n//   const [image, setImage] = useState(null);\n\n//   const handleImageUpload = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setImage(URL.createObjectURL(file));\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       {/* Header */}\n//       <header className=\"header\">\n//         <h1>INOVONICS VECTORIZER</h1>\n//       </header>\n\n//       {/* Main Content */}\n//       <div className=\"content\">\n//         {/* Upload Button */}\n//         <div className=\"upload-section\">\n//           <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n//         </div>\n\n//         {/* Image and Detected Boundaries Section */}\n//         <div className=\"image-container\">\n//           {/* Original Uploaded Image */}\n//           <div className=\"image-box\">\n//             <p className=\"title\">The original uploaded image:</p>\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <div className=\"placeholder\">No Image</div>\n//             )}\n//           </div>\n\n//           {/* Detected Boundaries */}\n//           <div className=\"image-box\">\n//             <p className=\"title\">Detected Boundaries:</p>\n//             <div className=\"placeholder\">Processing...</div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n// import React, { useState } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [image, setImage] = useState(null);\n//   const [jsonOutput, setJsonOutput] = useState(null);\n//   const [error, setError] = useState(\"\");\n\n//   const handleImageUpload = (event) => {\n//     const file = event.target.files[0];\n\n//     if (file) {\n//       const fileType = file.type;\n//       if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n//         setImage(URL.createObjectURL(file));\n//         setError(\"\");\n\n//         // Mock JSON Output (Replace this with real processing output)\n//         const mockJson = {\n//           filename: file.name,\n//           size: file.size,\n//           format: fileType,\n//           detectedBoundaries: [\n//             { x: 10, y: 20, width: 100, height: 150 },\n//             { x: 200, y: 50, width: 80, height: 90 },\n//           ],\n//         };\n//         setJsonOutput(mockJson);\n//       } else {\n//         setError(\"Only PNG or JPEG files are allowed.\");\n//         setImage(null);\n//         setJsonOutput(null);\n//       }\n//     }\n//   };\n\n//   return (\n//     <>\n//       {/* Full Width Header */}\n//       <header className=\"header\">\n//         <h1>INOVONICS VECTORIZER</h1>\n//       </header>\n\n//       {/* Full Screen Container */}\n//       <div className=\"main-container\">\n//         {/* Upload and Image Section */}\n//         <div className=\"upload-image-section\">\n//           {/* Upload Section */}\n//           <div className=\"upload-box\">\n//             <input\n//               type=\"file\"\n//               accept=\"image/png, image/jpeg\"\n//               onChange={handleImageUpload}\n//               style={{ display: \"none\" }}\n//               id=\"fileInput\"\n//             />\n//             <label htmlFor=\"fileInput\" className=\"upload-btn\">\n//               Upload Image\n//             </label>\n//             {error && <p className=\"error-message\">{error}</p>}\n//           </div>\n\n//           {/* Image Display Section */}\n//           <div className=\"image-box\">\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <p>No Image Uploaded</p>\n//             )}\n//           </div>\n//         </div>\n\n//         {/* JSON Output Section */}\n//         <div className=\"json-container\">\n//           <h3>JSON Output:</h3>\n//           <pre className=\"json-output\">\n//             {jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"}\n//           </pre>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n\n// import React, { useState } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [image, setImage] = useState(null);\n//   const [jsonOutput, setJsonOutput] = useState(null);\n//   const [error, setError] = useState(\"\");\n\n//   const handleImageUpload = (event) => {\n//     const file = event.target.files[0];\n\n//     if (file) {\n//       const fileType = file.type;\n//       if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n//         setImage(URL.createObjectURL(file));\n//         setError(\"\");\n\n//         // Mock JSON Output (Replace this with real processing output)\n//         const mockJson = {\n//           filename: file.name,\n//           size: file.size,\n//           format: fileType,\n//           detectedBoundaries: [\n//             { x: 10, y: 20, width: 100, height: 150 },\n//             { x: 200, y: 50, width: 80, height: 90 },\n//           ],\n//         };\n//         setJsonOutput(mockJson);\n//       } else {\n//         setError(\"Only PNG or JPEG files are allowed.\");\n//         setImage(null);\n//         setJsonOutput(null);\n//       }\n//     }\n//   };\n\n//   return (\n//     <>\n//       {/* Full Width Header */}\n//       <header className=\"header\">\n//         <img src=\"/logo.png\" alt=\"Logo\" className=\"logo\" />\n//         <h1>2D Floorplan Vectorizer</h1>\n//       </header>\n\n//       {/* Full Screen Container */}\n//       <div className=\"main-container\">\n//         {/* Upload and Image Section */}\n//         <div className=\"upload-image-section\">\n//           {/* Upload Section */}\n//           <div className=\"upload-box\">\n//             <input\n//               type=\"file\"\n//               accept=\"image/png, image/jpeg\"\n//               onChange={handleImageUpload}\n//               style={{ display: \"none\" }}\n//               id=\"fileInput\"\n//             />\n//             <label htmlFor=\"fileInput\" className=\"upload-btn\">\n//               Upload Image\n//             </label>\n//             {error && <p className=\"error-message\">{error}</p>}\n//           </div>\n\n//           {/* Image Display Section */}\n//           <div className=\"image-box\">\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <p>No Image Uploaded</p>\n//             )}\n//           </div>\n//         </div>\n\n//         {/* JSON Output Section */}\n//         <div className=\"json-container\">\n//           <h3>JSON Output:</h3>\n//           <pre className=\"json-output\">\n//             {jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"}\n//           </pre>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import \"./index.css\";\n\n// function App() {\n//   const [image, setImage] = useState(null);\n//   const [jsonOutput, setJsonOutput] = useState(null);\n//   const [error, setError] = useState(\"\");\n\n//   const handleImageUpload = (file) => {\n//     if (file) {\n//       const fileType = file.type;\n//       if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n//         setImage(URL.createObjectURL(file));\n//         setError(\"\");\n\n//         // Mock JSON Output (Replace this with real processing output)\n//         const mockJson = {\n//           filename: file.name,\n//           size: file.size,\n//           format: fileType,\n//           detectedBoundaries: [\n//             { x: 10, y: 20, width: 100, height: 150 },\n//             { x: 200, y: 50, width: 80, height: 90 },\n//           ],\n//         };\n//         setJsonOutput(mockJson);\n//       } else {\n//         setError(\"Only PNG or JPEG files are allowed.\");\n//         setImage(null);\n//         setJsonOutput(null);\n//       }\n//     }\n//   };\n\n//   const handleFileSelect = (event) => {\n//     const file = event.target.files[0];\n//     handleImageUpload(file);\n//   };\n\n//   const handleDragOver = (event) => {\n//     event.preventDefault(); // Prevents opening file in a new tab\n//   };\n\n//   const handleDrop = (event) => {\n//     event.preventDefault(); // Prevents default browser behavior\n//     const file = event.dataTransfer.files[0];\n//     handleImageUpload(file);\n//   };\n\n//   return (\n//     <>\n//       {/* Full Width Header */}\n//       <header className=\"header\">\n//   <img src=\"/logo.png\" alt=\"Logo\" className=\"logo\" />\n//   <div className=\"header-title\">2D Floorplan Vectorizer</div>\n// </header>\n\n//       {/* Full Screen Container */}\n//       <div className=\"main-container\">\n//         {/* Upload and Image Section */}\n//         <div className=\"upload-image-section\">\n//           {/* Upload Section */}\n//           <div\n//             className=\"upload-box\"\n//             onDragOver={handleDragOver}\n//             onDrop={handleDrop}\n//           >\n//             <label htmlFor=\"fileInput\" className=\"upload-btn\">\n//               Upload Image\n//             </label>\n//             <input\n//               type=\"file\"\n//               accept=\"image/png, image/jpeg\"\n//               onChange={handleFileSelect}\n//               style={{ display: \"none\" }}\n//               id=\"fileInput\"\n//             />\n//             <div className=\"drag-drop-box\">\n//               <p>Drag and drop files here</p>\n//             </div>\n//             {error && <p className=\"error-message\">{error}</p>}\n//           </div>\n\n//           {/* Image Display Section */}\n//           <div className=\"image-box\">\n//             {image ? (\n//               <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n//             ) : (\n//               <p>No Image Uploaded</p>\n//             )}\n//           </div>\n//         </div>\n\n//         {/* JSON Output Section */}\n//         <div className=\"json-container\">\n//           <h3>JSON Output:</h3>\n//           <pre className=\"json-output\">\n//             {jsonOutput ? JSON.stringify(jsonOutput, null, 2) : \"No Data\"}\n//           </pre>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n\n\nimport React, { useState } from \"react\";\nimport jsonData from \"./data.json\"; // Import JSON file\nimport \"./index.css\";\n\nfunction App() {\n  const [image, setImage] = useState(null);\n  const [jsonOutput, setJsonOutput] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleImageUpload = (file) => {\n    if (file) {\n      const fileType = file.type;\n      if (fileType === \"image/png\" || fileType === \"image/jpeg\") {\n        setError(\"\");\n        setIsProcessing(true);\n\n        // Wait for 5 seconds before showing image & JSON\n        setTimeout(() => {\n          setImage(URL.createObjectURL(file));\n          setJsonOutput(jsonData); // Load JSON from file\n          setIsProcessing(false);\n        }, 5000);\n      } else {\n        setError(\"Only PNG or JPEG files are allowed.\");\n        setImage(null);\n        setJsonOutput(null);\n      }\n    }\n  };\n\n  const handleFileSelect = (event) => {\n    const file = event.target.files[0];\n    handleImageUpload(file);\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault(); // Prevents opening file in a new tab\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault(); // Prevents default browser behavior\n    const file = event.dataTransfer.files[0];\n    handleImageUpload(file);\n  };\n\n  return (\n    <>\n      {/* Full Width Header */}\n      <header className=\"header\">\n        <img src=\"/logo.png\" alt=\"Logo\" className=\"logo\" />\n        <div className=\"header-title\">2D Floorplan Vectorizer</div>\n      </header>\n\n      {/* Full Screen Container */}\n      <div className=\"main-container\">\n        {/* Upload and Image Section */}\n        <div className=\"upload-image-section\">\n          {/* Upload Section */}\n          <div\n            className=\"upload-box\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n          >\n            <label htmlFor=\"fileInput\" className=\"upload-btn\">\n              Upload Image\n            </label>\n            <input\n              type=\"file\"\n              accept=\"image/png, image/jpeg\"\n              onChange={handleFileSelect}\n              style={{ display: \"none\" }}\n              id=\"fileInput\"\n            />\n            <div className=\"drag-drop-box\">\n              <p>Drag and drop files here</p>\n            </div>\n            {error && <p className=\"error-message\">{error}</p>}\n          </div>\n\n          {/* Image Display Section */}\n          <div className=\"image-box\">\n            {isProcessing ? (\n              <p>Processing... Please wait</p>\n            ) : image ? (\n              <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />\n            ) : (\n              <p>No Image Uploaded</p>\n            )}\n          </div>\n        </div>\n\n        {/* JSON Output Section */}\n        <div className=\"json-container\">\n          <h3>JSON Output:</h3>\n          <pre className=\"json-output\">\n            {isProcessing\n              ? \"Processing JSON...\"\n              : jsonOutput\n              ? JSON.stringify(jsonOutput, null, 2)\n              : \"No Data\"}\n          </pre>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}